clear
clc
close all


[msg_t,fs] = audioread('eric.wav');
L = length(msg_t);
% sound(msg_t,fs);

%plot in time domain 
tvec = linspace(0,length(msg_t)/fs,length(msg_t));
figure; 
subplot(2,1,1); plot(tvec,msg_t); title('Msg Signal in Time');

%plot in frequency domain
Msg_f = abs(fftshift(fft(msg_t)));
fvec = linspace(-fs/2,fs/2,length(Msg_f));
subplot(2,1,2); plot(fvec, Msg_f); title('Msg Signal in Frequency Domain');

% acts as time delay between playing sound file before and after LPF
% input('Press Enter to Continue...');

% LPF construction cut-off 4kHz
% n = length(Msg_f);
% sampPerFreq = floor(n/fs);
% limit = sampPerFreq * (fs/2 - 4000);
% Msg_f([1:limit n-limit+1:end]) = 0;
% figure;
% subplot(2,1,2); plot(fvec, Msg_f); title('Filtered msg in f-domain');
% msg_t = real(ifft(ifftshift(Msg_f)));
% subplot(2,1,1);
% plot(tvec, msg_t); title('Filtered msg in t-domain');

% mean(Msg_f)
sound(msg_t,fs);

% NBFM mod
% beta << 1 for NBFM
% const params
fc = 100000;        %10^5 Hz
fs_new = 5 * fc;    %new sampling feq (upsampling)
A = 10;             %amplitude
Kf = 2*pi*10^-2;    %frequency sensetivity

msg_t_resam = resample(msg_t,fs_new,fs);
tvec_new = linspace(0,length(msg_t_resam)/fs_new,length(msg_t_resam));
carrier = A*cos(2*pi*fc*tvec_new);
phi = cumsum(msg_t_resam);
B = A .* phi;
s_t = A .* carrier' - B .* hilbert(carrier)';
s_f = abs(fftshift(fft(s_t)));
fvec_new = linspace(-fs_new/2,fs_new/2,length(s_f));
figure(3);
plot(fvec_new, s_f); title('FM signal in Frequency Domain');


% demod
y = diff(s_t);
env = abs(hilbert(y));
tvec_new = linspace(0,length(msg_t_resam)/fs_new,length(msg_t_resam));